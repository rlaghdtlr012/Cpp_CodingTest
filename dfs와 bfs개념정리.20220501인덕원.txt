탐색 : 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정
ex) DFS, BFS

인접행렬방식 : 메모리 낭비, 연결 노드에 대한 정보 얻는 속도 빠름
인접 리스트 방식 : 메모리 효율적으로 사용, 연결 노드에 대한 정보 얻는 속도 느림

DFS(깊이우선탐색 알고리즘) : 최대한 깊숙이 들어가서 노드 반복한 후, 다시 돌아가 다른 경로로 탐색하는 알고리즘
1. 탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다.
2. 스택의 최상단 노드에 방문하지 않은 인접노드가 있으면 그 인접 노드를 스택에 넣고 방문처리한다.
-방문하지 않은 인접노드가 없으면 스택에서 최상단 노드를 꺼낸다
3. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.

(방문처리 == 스택에 한 번 삽입되어 처리된 노드가 다시 삽입되지 않게 체크하는 것)
==> ****스택을 이용하는 알고리즘*********
실제 구현은 재귀 함수를 이용할 때 매우 간결하게 구현 가능
가장 깊숙이 위치하는 노드에 닿을 때까지 탐색한다.
--> 인접한 노드 중에서 방문하지 않은 노드가 여러 개 있으면 번호가 낮은 순서부터 처리한다.
--> O(N)의 시간 복잡도 소요

BFS(너비우선탐색 알고리즘) : 가까운 노트부터 탐색하는 알고리즘. 선입선출 방식의 큐 자료구조를 이용하는 것이 정석
1. 탐색 시작 노드를 큐에 삽입하고 방문 처리한다.
2. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하여 방문 처리한다.
3. 2번 과정 반복
--> 마찬가지로 인접노드가 여러개라면 숫자가 낮은 것부터ㄱㄱ
==> *****큐를 이용하는 알고리즘*******(deque라이브러리 사용하는 것이 좋음)
--> O(N)의 시간 복잡도 소요, 일반적으로 수행시간이 dfs 보다 좋음



